1.
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty())
            return 0;
        int profit=0,buy=0,sell=0;
        for(int i=1;i<prices.size();i++)
        {
            if (prices[i]<prices[buy])
            {
                profit=max(profit,prices[sell]-prices[buy]);
                buy=sell=i;
            }
            else if (prices[i]>prices[sell])
                sell=i;
        }
        return max(profit,prices[sell]-prices[buy]);
    }
};

2.
You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size()<2)
            return 0;
        int profit=0;
        vector<int>profits(prices.size()+1,0);//+1是为了让倒数第二天在计算利润时，形式和下面相似
        for (int i=profits.size()-3;i>-1;i--)
        {
            //profits存储的是阶段性最优
            if (prices[i]>=prices[i+1])
                profits[i]=profits[i+1];//如果第i天的价格高于第i+1天的，那么第i天买入的利润肯定低于第i+1天买入，因此从第i天开始的工作应该与第i+1天开始的相同
            else
            {
                profits[i]=prices[i+1]-prices[i]+max(profits[i+2],profits[i+1]);//如果第i天的价格低于第i+1天的，那么从第i天开始买入的最大利润要不就是第i天买入，第i+1天卖出，后续工作与第i+2天开始相同（因为不限制买卖次数，所以只要前一天价格低于后一天价格，都应该进行一次买入卖出）；要不就是第i天买入，后续工作与第i+1天开始买入的相同（只有当profits[i+2]不等于profits[i+1]时max才有意义，而如果不相等则说明第i+1天进行了买入）
                profit=max(profit,profits[i]);//买入日期发生了变化，profit也有了变化，因此要找出最大值
            }
        }
        return profit;
    }
};

3.
 You may complete at most two transactions.
 
class Solution {
public:
    int maxProfit(vector<int>& prices) {    
        if (prices.size()<2)
            return 0;
        vector<int>profits1(prices.size()+1,0);
        maxOneProfit(prices,profits1);
        vector<int>profits2(prices.size(),0);
        int profit=0;
        for (int i=prices.size()-2,buy=prices.size()-1;i>-1;i--)
        {
            profits2[i]=prices[i+1]-prices[i]+max(profits1[i+2],profits2[i+1]);//profits2[i]代表第i天第一次买入，总共最多可做两次交易的最大利润
            profit=max(profit,profits2[i]);
        }
        return profit;
    }
    void maxOneProfit(vector<int>&prices,vector<int>&profits)
    {
        int sell=prices.size()-1,buy=prices.size()-1;
        for (int i=buy-1;i>-1;i--)
        {
            if (prices[i]<prices[buy])
            {
                profits[i]=max(prices[sell]-prices[i],profits[i+1]);//全局最优
                //profits[i]=prices[sell]-prices[i];//阶段性最优
                buy=i;
            }
            else
            {   
                profits[i]=profits[buy];
                if (prices[i]>prices[sell])
                    sell=buy=i;
            }
        }
    }
};
