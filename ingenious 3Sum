15. 3Sum
________________________________________
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
由于要三个数相加为0，则让数组从小到大排列后，前两个数相加一定要小于0。且若nums[i]+nums[j]+nums[k]>0，则当i=i+1时不等式也必然成立，因此可以寻找i一直递增时k的上限k0，以缩小尝试范围
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        r,i,k0=[],0,len(nums)-1
        nums.sort()
        while i<len(nums)-2 and nums[i]+nums[i+1]<=0:
            j,k=i+1,min(k0,len(nums)-1)
            while j<k and nums[i]+nums[j]+nums[k]>0:
                k-=1
            k0=k+1 
            while j<k:
                if nums[i]+nums[j]+nums[k]<0:
                    j+=1
                elif nums[i]+nums[j]+nums[k]>0:
                    k-=1
                else:
                    r.append([nums[i],nums[j],nums[k]])
                    while j<k and nums[j]==nums[j+1]:
                        j+=1
                    while j<k and nums[k]==nums[k-1]:
                        k-=1              
                    j,k=j+1,k-1                    
            while i<len(nums)-2 and nums[i]+nums[i+1]<=0 and nums[i]==nums[i+1]:
                i+=1
            i+=1
        return r
