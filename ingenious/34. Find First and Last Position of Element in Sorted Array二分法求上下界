Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>r;
        if (nums.empty())
            return {-1,-1};
        //取下界。也是一般二分法的代码
        int left=0,right=nums.size(),middle=(left+right)/2;
        while (left<right)
        {
            middle=(left+right)/2;
            if (nums[middle]<target)
                left=middle+1;
            else
                right=middle;
        }
        //如果target不在数组中，返回-1
        if (left>=nums.size() || nums[left]!=target)
            return {-1,-1};
        r.push_back(left);
        //求上界的时候，需要让middle取到right而取不到left。因此left初始值为-1，right初始值为nums.size()-1且middle=(left+right)/2
        left=-1;
        right=nums.size()-1;
        while(left<right)
        {
            middle=(left+right+1)/2;
            if (nums[middle]>target)
                right=middle-1;
            else
                left=middle;
        }
        r.push_back(left);
        return r;
    }
};
