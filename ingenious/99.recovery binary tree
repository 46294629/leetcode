Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode*pre=0,*parent=0,*cur=root,*one=0,*two=0;
        //side代表当前的cur为其父节点的左子节点还是右子节点
        int side=-1;//1:right,-1:left
        findwrong(pre,parent,cur,one,two,side);
        int val=one->val;
        one->val=two->val;
        two->val=val;        
    }
    
    bool findwrong(TreeNode*pre,TreeNode*parent,TreeNode*cur,
                   TreeNode*&one,TreeNode*&two,int side)
    {
        if (two!=cur)//如果two==cur，代表one->right=two。此时可以直接略过two的左子树而查看右子树
        {
        if (cur->left)
        {
            if (cur->val<cur->left->val)
            {
                if (!one)
                {
                    //不确定one究竟是哪个。如果在cur->left的左子树中找到错误，则one为cur。否则one应该为cur->left
                    one=cur;                    
                }
                else 
                {
                    if (one->val<cur->val)
                        two=cur->left;
                    else
                        two=cur;
                    return true;
                }
            }   
            if (findwrong(side==1?parent:pre,cur,cur->left,one,two,-1))
                return true;
        }            
        else if (side==-1 && pre && pre->val>cur->val)
        {
            if (!one)
            {
                one=pre;
                //去看cur的右子树与父节点右子树
                two=cur;
            }
            else 
            {
                if (one->val>pre->val)
                    two=cur;
                else
                    two=pre;
                return true;
            }
        }
        }
        //在cur->left的左子树中找不到错误，修改one
        if (!two && one && one->left==cur)
        {
            two=one;
            one=cur;
            return false;
        }
        if (cur->right)
        {
            if (cur->val>cur->right->val)
            {
                if (!one)
                {
                    one=cur;
                    //直接去看cur->right的右子树
                    two=cur->right;
                }
                else 
                {
                    if (one->val>cur->val)
                        two=cur->right;
                    else
                        two=cur;
                    return true;
                }
            }
            if (findwrong(side==-1?parent:pre,cur,cur->right,one,two,1))
                return true;
        }
        else if (side==1 && pre && pre->val<cur->val)            
        {
            if (!one)
            {
                one=cur;
                //直接去看pre的右子树与父节点右子树
                two=pre;                
            }
            else 
            {
                if (one->val>cur->val)
                    two=pre;
                else
                    two=cur;
                return true;
            }
        }        
        return false;
    }
           
};
