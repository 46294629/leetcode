Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

DFS或BFS，重点是当s很长或wordDict中很多时如何减少循环次数。方法是记录下中间变量。这是减少迭代次数的重要方法之一
class Solution {
public:
vector wordBreak(string s, vector<string>& wordDict) {

    sort(wordDict.begin(),wordDict.end(),[](const string& a, const string& b){return a.size()<b.size();});
	//if string a in index[i], it means a==s[i:i+size(a))
    map<int,vector<string>>index;
    int b;
    queue<int>q;
    q.push(0);
    while (!q.empty())
    {
        b=q.front();
        q.pop();
        if (index.find(b)!=index.end() || b==s.size())
            continue;
        for(int j=0;j<wordDict.size() && b+wordDict[j].size()<=s.size();j++)
        {
            if (!s.compare(b,wordDict[j].size(),wordDict[j]))
            {
                index[b].push_back(wordDict[j]);
                if (index.find(b+wordDict[j].size())==index.end())
                    q.push(b+wordDict[j].size());
            }         
        }
    }
	// if string b in wb[i], it means s[i:) can be sentenced to b
    unordered_map<int,vector<string>>wb;
    for(auto i=index.rbegin();i!=index.rend();i++)
    {
        for(int k=0,t;k!=i->second.size();k++)
        {
            t=i->first+i->second[k].size();
            if (t==s.size())
                wb[i->first].push_back(i->second[k]);
            else if (wb.find(t)==wb.end())
                continue;
            else
            {
                string tt=i->second[k]+" ";
                for(auto &j:wb[t])
                    wb[i->first].push_back(tt+j);
            }
              
        }           
    }
    return wb[0];
};

附139.word Break I
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<int>flag(s.size(),1);
        return find(s,wordDict,0,flag);
    }
    bool find(string&s, vector<string>&w,int b,vector<int>&flag)
    {
        if (b==s.size())
            return true;
        if (b>s.size() || !flag[b])
            return false;        
        for(auto i:w)
        {
            if (s.substr(b,i.size())==i && find(s,w,b+i.size(),flag))
                return true;                
        }
        flag[b]=0;
        return false;
    }
};
