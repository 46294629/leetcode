15. 3Sum
________________________________________
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
由于要三个数相加为0，则让数组从小到大排列后，前两个数相加一定要小于0。且若nums[i]+nums[j]+nums[k]>0，则当i=i+1时不等式也必然成立，因此可以寻找i一直递增时k的上限k0，以缩小尝试范围
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        r,i,k0=[],0,len(nums)-1
        nums.sort()
        while i<len(nums)-2 and nums[i]+nums[i+1]<=0:
            j,k=i+1,min(k0,len(nums)-1)
            while j<k and nums[i]+nums[j]+nums[k]>0:
                k-=1
            k0=k+1 
            while j<k:
                if nums[i]+nums[j]+nums[k]<0:
                    j+=1
                elif nums[i]+nums[j]+nums[k]>0:
                    k-=1
                else:
                    r.append([nums[i],nums[j],nums[k]])
                    while j<k and nums[j]==nums[j+1]:
                        j+=1
                    while j<k and nums[k]==nums[k-1]:
                        k-=1              
                    j,k=j+1,k-1                    
            while i<len(nums)-2 and nums[i]+nums[i+1]<=0 and nums[i]==nums[i+1]:
                i+=1
            i+=1
        return r

16. 3Sum Closest
Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

Example:

Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int cloest=nums[0]+nums[1]+nums.back(),ii=0,bb=1,ee=nums.size()-1;
        int i=0,b=1,e=nums.size()-1,sum;
        while (1)
        {            
            while (b<e)
            {
                sum=nums[i]+nums[b]+nums[e];
                if (abs(cloest-target)>abs(sum-target))
                {
                    ii=i;
                    bb=b;
                    ee=e;
                    cloest=sum;
                }
                if (cloest==target)
                    return cloest; 
                if (sum<target)
                    b++;
                else
                    e--;
            }
            i++;
            if (i>=nums.size()-2)
                break;
            if (cloest>target)
            {
                e=ee;
                b=i+1;
            }
            else if (cloest-nums[ii]+nums[i]<target)
            {
                b=bb;
                e=nums.size()-1;
            }
            else
            {
                b=i+1;
                e=nums.size()-1;
            }
            
        }
        return cloest;
    }
};
