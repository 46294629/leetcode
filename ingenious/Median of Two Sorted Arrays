4. Median of Two Sorted Arrays hard
________________________________________
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
Explanation:
首先，什么是中间数：把一个数组分为左右两个长度相等（或左数组比右数组长度大1）的子数组，且右数组的数值总是大于左数组。那么（左数组的最大值+右数组的最小值）/2.0（或左数组的最大值）即为中间数。
因此，对于nums1和nums2，可以分为两个子数组：
 
(上图中A即为nums1，B为nums2)
只要使得i+j=m+n-i-j或i+j=m-n-i-j+1，且A[i-1]<B[j]，B[j-1]<A[i]，那么左右数组就寻找成功。
因此，让i=0~n-1，j=(n+m+1)/2-i（当n+m为偶数时，加1不影响j的取值），不断变换i，满足A[i-1]<B[j]，B[j-1]<A[i]条件即完成任务。
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if (nums1.size()<nums2.size())
            return findMedianSortedArrays(nums2,nums1);  // 为了使j总是在0~m之间，必须要满足n<m
        int m=nums1.size(),n=nums2.size();
        int i=n/2,j=(m+n+1)/2-i,imin=0,imax=n; //imin,imax用于在每次尝试后减少i不必要的尝试，缩小尝试范围，让i不会进入死循环而重复取值
        while (1)
        {
            if (i<n && nums1[j-1]>nums2[i])
            {
                imin=i;
                i=(i+imax+1)/2;
                j=(m+n+1)/2-i;
            }
            else if (i && nums2[i-1]>nums1[j])
            {
                imax=i;
                i=(i+imin)/2;
                j=(m+n+1)/2-i;
            }
            else
                break;
        }
        if ((m+n)%2)
            return max((i==0?nums1[j-1]:nums2[i-1]),(j==0?nums2[i-1]:nums1[j-1]));//取左数组最大值
        else
            return (max((i==0?nums1[j-1]:nums2[i-1]),(j==0?nums2[i-1]:nums1[j-1]))+min((i==n?nums1[j]:nums2[i]),(j==m?nums2[i]:nums1[j])))/2.0;
    }
};
