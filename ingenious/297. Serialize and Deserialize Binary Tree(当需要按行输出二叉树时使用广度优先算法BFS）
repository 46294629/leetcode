Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (!root)
            return "";
		//use BFS, so need a queue
        queue<TreeNode*>q;
        q.push(root);
        TreeNode *p;
        string s;
        while (!q.empty())
        {
            p=q.front();
            q.pop();
            if (!p)
                s.append("null,");
            else
            {
                int2string(p->val,s);
                s.push_back(',');
                q.push(p->left);
                q.push(p->right);
            }
        }
        auto i=s.find_last_not_of("null,");      
        return s.substr(0,i+1);
    }
	
	void int2string(int i, string &s)
    {
        long long j=1;
        int ii;
        if (i<0)
        {
            s.push_back('-');
            ii=-i;
        }
        else
            ii=i;
        while (j*10<i)
            j*=10;
        while (j)
        {
            s.push_back(ii/j+'0');
            ii=ii%j;
            j/=10;
        }
    }
	
   // Decodes your encoded data to tree.
   TreeNode* deserialize(string data) {
        if (data.empty())
            return nullptr;
        queue<TreeNode*>q;
        TreeNode* head=nullptr,*p=nullptr,*pchild=nullptr;
        size_t i=0;
        des_string2node(data, head,i);
        p=head;
        q.push(p);
        while (1)
        {
            p=q.front();
            q.pop();
            if (!des_string2node(data,pchild,i))
                return head;
            p->left=pchild;
            if (pchild)
                q.push(pchild);
            if (!des_string2node(data,pchild,i))
                return head;
            p->right=pchild;
            if (pchild)
                q.push(pchild);
        }
    }
	
	bool des_string2node(const string &d, TreeNode* &p, size_t& i)
    {
        if (i>d.size())
            return false;
        if (d[i]=='n')
        {
            i+=5;
            p=nullptr;
            return true;
        }
        int n=0;
        bool flag=0;
        if (d[i]=='-')
        {
            i++;
            flag=1;
        }
        while (i<d.size() && d[i]!=',')
            n=n*10+d[i++]-'0';
        p=new TreeNode(flag?-n:n);
        i++;
        return true;
    }
